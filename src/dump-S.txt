
insertion-sort.elf:     format de fichier elf32-littleriscv


Déassemblage de la section .text :

000100d8 <minIndex>:
#define SIZE 99

int input[] = {60, 41, 46, 50, 44, 3, 84, 80, 55, 57, 91, 22, 21, 12, 64, 59, 71, 34, 81, 77, 69, 95, 2, 24, 61, 73, 25, 19, 29, 91, 45, 53, 39, 15, 47, 58, 3, 62, 81, 0, 33, 83, 12, 64, 75, 59, 32, 68, 98, 68, 53, 74, 88, 30, 65, 23, 97, 66, 49, 46, 18, 22, 0, 30, 3, 33, 13, 33, 31, 61, 14, 87, 57, 95, 20, 92, 67, 71, 42, 52, 18, 98, 2, 93, 95, 69, 90, 8, 97, 46, 26, 68, 69, 84, 73, 35, 44, 88, 79, 65};

int minIndex(int *array, int n)
{
   100d8:	00050813          	mv	a6,a0
	int i,minIdx = 0;
	for(i = 0; i < n; i++)
   100dc:	04b05063          	blez	a1,1011c <minIndex+0x44>
   100e0:	00050693          	mv	a3,a0
	int i,minIdx = 0;
   100e4:	00000513          	li	a0,0
	for(i = 0; i < n; i++)
   100e8:	00000713          	li	a4,0
   100ec:	0100006f          	j	100fc <minIndex+0x24>
   100f0:	00170713          	addi	a4,a4,1
   100f4:	00468693          	addi	a3,a3,4
   100f8:	02e58063          	beq	a1,a4,10118 <minIndex+0x40>
	{
		if (array[i] < array[minIdx])
   100fc:	00251793          	slli	a5,a0,0x2
   10100:	00f807b3          	add	a5,a6,a5
   10104:	0006a603          	lw	a2,0(a3)
   10108:	0007a783          	lw	a5,0(a5)
   1010c:	fef652e3          	bge	a2,a5,100f0 <minIndex+0x18>
   10110:	00070513          	mv	a0,a4
   10114:	fddff06f          	j	100f0 <minIndex+0x18>
   10118:	00008067          	ret
	int i,minIdx = 0;
   1011c:	00000513          	li	a0,0
			minIdx = i;
		}
	}

	return minIdx;
}
   10120:	00008067          	ret

00010124 <main>:

int main()
{
   10124:	e5010113          	addi	sp,sp,-432
   10128:	1a112623          	sw	ra,428(sp)
   1012c:	1a812423          	sw	s0,424(sp)
   10130:	1a912223          	sw	s1,420(sp)
   10134:	1b212023          	sw	s2,416(sp)
   10138:	19312e23          	sw	s3,412(sp)
 	int buf[SIZE];
	int i;

	for(i = 0; i < SIZE; i++)
   1013c:	000117b7          	lui	a5,0x11
   10140:	1e878793          	addi	a5,a5,488 # 111e8 <input>
   10144:	00410413          	addi	s0,sp,4
   10148:	18c78613          	addi	a2,a5,396
{
   1014c:	00040713          	mv	a4,s0
	{
		buf[i] = input[i];
   10150:	0007a683          	lw	a3,0(a5)
   10154:	00d72023          	sw	a3,0(a4)
	for(i = 0; i < SIZE; i++)
   10158:	00478793          	addi	a5,a5,4
   1015c:	00470713          	addi	a4,a4,4
   10160:	fec798e3          	bne	a5,a2,10150 <main+0x2c>
	}

	for(i = 0; i < SIZE-1; i++)
   10164:	00000493          	li	s1,0
	{
		int minIdx = i + minIndex(&buf[i], SIZE - i);
   10168:	06300993          	li	s3,99
	for(i = 0; i < SIZE-1; i++)
   1016c:	06200913          	li	s2,98
		int minIdx = i + minIndex(&buf[i], SIZE - i);
   10170:	409985b3          	sub	a1,s3,s1
   10174:	00040513          	mv	a0,s0
   10178:	f61ff0ef          	jal	ra,100d8 <minIndex>
   1017c:	00950533          	add	a0,a0,s1
		int tmp = buf[minIdx];
   10180:	00251513          	slli	a0,a0,0x2
   10184:	19010793          	addi	a5,sp,400
   10188:	00a78533          	add	a0,a5,a0
   1018c:	e7452783          	lw	a5,-396(a0)
		buf[minIdx] = buf[i];
   10190:	00042703          	lw	a4,0(s0)
   10194:	e6e52a23          	sw	a4,-396(a0)
		buf[i] = tmp;
   10198:	00f42023          	sw	a5,0(s0)
	for(i = 0; i < SIZE-1; i++)
   1019c:	00148493          	addi	s1,s1,1
   101a0:	00440413          	addi	s0,s0,4
   101a4:	fd2496e3          	bne	s1,s2,10170 <main+0x4c>
	}

	return buf[0];
}
   101a8:	00412503          	lw	a0,4(sp)
   101ac:	1ac12083          	lw	ra,428(sp)
   101b0:	1a812403          	lw	s0,424(sp)
   101b4:	1a412483          	lw	s1,420(sp)
   101b8:	1a012903          	lw	s2,416(sp)
   101bc:	19c12983          	lw	s3,412(sp)
   101c0:	1b010113          	addi	sp,sp,432
   101c4:	00008067          	ret

000101c8 <_start>:

int _start()
{
   101c8:	ff010113          	addi	sp,sp,-16
   101cc:	00112623          	sw	ra,12(sp)
  int x = main();
   101d0:	f55ff0ef          	jal	ra,10124 <main>
  asm volatile ("li a7, 10; ecall"); // exit system call
   101d4:	00a00893          	li	a7,10
   101d8:	00000073          	ecall
  return x;
}
   101dc:	00c12083          	lw	ra,12(sp)
   101e0:	01010113          	addi	sp,sp,16
   101e4:	00008067          	ret
